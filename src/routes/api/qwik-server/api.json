{
  "id": "qwik-server",
  "package": "@builder.io/qwik/server",
  "members": [
    {
      "name": "getQwikLoaderScript",
      "id": "getqwikloaderscript",
      "hierarchy": [
        {
          "name": "getQwikLoaderScript",
          "id": "getqwikloaderscript"
        }
      ],
      "kind": "Function",
      "content": "Provides the qwikloader.js file as a string. Useful for tooling to inline the qwikloader script into HTML.\n\n\n```typescript\nexport declare function getQwikLoaderScript(opts?: {\n    events?: string[];\n    debug?: boolean;\n}): string;\n```\n\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  opts | { events?: string\\[\\]; debug?: boolean; } | _(Optional)_ |\n\n**Returns:**\n\nstring",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/scripts.ts",
      "mdFile": "qwik.getqwikloaderscript.md"
    },
    {
      "name": "InOrderAuto",
      "id": "inorderauto",
      "hierarchy": [
        {
          "name": "InOrderAuto",
          "id": "inorderauto"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface InOrderAuto \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [maximunChunk?](#) |  | number | _(Optional)_ |\n|  [maximunInitialChunk?](#) |  | number | _(Optional)_ |\n|  [strategy](#) |  | 'auto' |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.inorderauto.md"
    },
    {
      "name": "InOrderDisabled",
      "id": "inorderdisabled",
      "hierarchy": [
        {
          "name": "InOrderDisabled",
          "id": "inorderdisabled"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface InOrderDisabled \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [strategy](#) |  | 'disabled' |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.inorderdisabled.md"
    },
    {
      "name": "InOrderStreaming",
      "id": "inorderstreaming",
      "hierarchy": [
        {
          "name": "InOrderStreaming",
          "id": "inorderstreaming"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type InOrderStreaming = InOrderAuto | InOrderDisabled | InOrderDirect;\n```\n**References:** [InOrderAuto](#inorderauto)<!-- -->, [InOrderDisabled](#inorderdisabled)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.inorderstreaming.md"
    },
    {
      "name": "PrefetchImplementation",
      "id": "prefetchimplementation",
      "hierarchy": [
        {
          "name": "PrefetchImplementation",
          "id": "prefetchimplementation"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface PrefetchImplementation \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [linkInsert?](#) |  | 'js-append' \\| 'html-append' \\| null | <p>_(Optional)_ <code>js-append</code>: Use JS runtime to create each <code>&lt;link&gt;</code> and append to the body.</p><p><code>html-append</code>: Render each <code>&lt;link&gt;</code> within html, appended at the end of the body.</p> |\n|  [linkRel?](#) |  | 'prefetch' \\| 'preload' \\| 'modulepreload' \\| null | _(Optional)_ Value of the <code>&lt;link rel=&quot;...&quot;&gt;</code> attribute when link is used. Defaults to <code>prefetch</code> if links are inserted. |\n|  [prefetchEvent?](#) |  | 'always' \\| null | <p>_(Optional)_ Dispatch a <code>qprefetch</code> event with detail data containing the bundles that should be prefetched. The event dispatch script will be inlined into the document's HTML so any listeners of this event should already be ready to handle the event.</p><p>This implementation will inject a script similar to:</p>\n```\n<script type=\"module\">\n  document.dispatchEvent(new CustomEvent(\"qprefetch\", { detail:{ \"bundles\": [...] } }))\n</script>\n```\n<p>By default, the <code>prefetchEvent</code> implementation will be set to <code>always</code>.</p> |\n|  [workerFetchInsert?](#) |  | 'always' \\| 'no-link-support' \\| null | <p>_(Optional)_ <code>always</code>: Always include the worker fetch JS runtime.</p><p><code>no-link-support</code>: Only include the worker fetch JS runtime when the browser doesn't support <code>&lt;link&gt;</code> prefetch/preload/modulepreload.</p> |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.prefetchimplementation.md"
    },
    {
      "name": "PrefetchResource",
      "id": "prefetchresource",
      "hierarchy": [
        {
          "name": "PrefetchResource",
          "id": "prefetchresource"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface PrefetchResource \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [imports](#) |  | [PrefetchResource](#prefetchresource)<!-- -->\\[\\] |  |\n|  [url](#) |  | string |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.prefetchresource.md"
    },
    {
      "name": "PrefetchStrategy",
      "id": "prefetchstrategy",
      "hierarchy": [
        {
          "name": "PrefetchStrategy",
          "id": "prefetchstrategy"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface PrefetchStrategy \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [implementation?](#) |  | [PrefetchImplementation](#prefetchimplementation) | _(Optional)_ |\n|  [symbolsToPrefetch?](#) |  | [SymbolsToPrefetch](#symbolstoprefetch) | _(Optional)_ |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.prefetchstrategy.md"
    },
    {
      "name": "QwikLoaderOptions",
      "id": "qwikloaderoptions",
      "hierarchy": [
        {
          "name": "QwikLoaderOptions",
          "id": "qwikloaderoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface QwikLoaderOptions \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [events?](#) |  | string\\[\\] | _(Optional)_ |\n|  [include?](#) |  | 'always' \\| 'never' \\| 'auto' | _(Optional)_ |\n|  [position?](#) |  | 'top' \\| 'bottom' | _(Optional)_ |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.qwikloaderoptions.md"
    },
    {
      "name": "Render",
      "id": "render",
      "hierarchy": [
        {
          "name": "Render",
          "id": "render"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type Render = RenderToString | RenderToStream;\n```\n**References:** [RenderToString](#rendertostring)<!-- -->, [RenderToStream](#rendertostream)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.render.md"
    },
    {
      "name": "RenderOptions",
      "id": "renderoptions",
      "hierarchy": [
        {
          "name": "RenderOptions",
          "id": "renderoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderOptions extends SerializeDocumentOptions \n```\n**Extends:** [SerializeDocumentOptions](#serializedocumentoptions)\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [base?](#) |  | string \\| ((options: [RenderOptions](#renderoptions)<!-- -->) =&gt; string) | _(Optional)_ Specifies the root of the JS files of the client build. Setting a base, will cause the render of the <code>q:base</code> attribute in the <code>q:container</code> element. |\n|  [containerAttributes?](#) |  | Record&lt;string, string&gt; | _(Optional)_ |\n|  [containerTagName?](#) |  | string | _(Optional)_ When set, the app is serialized into a fragment. And the returned html is not a complete document. Defaults to <code>html</code> |\n|  [locale?](#) |  | string \\| ((options: [RenderOptions](#renderoptions)<!-- -->) =&gt; string) | _(Optional)_ Language to use when rendering the document. |\n|  [prefetchStrategy?](#) |  | [PrefetchStrategy](#prefetchstrategy) \\| null | _(Optional)_ |\n|  [qwikLoader?](#) |  | [QwikLoaderOptions](#qwikloaderoptions) | _(Optional)_ Specifies if the Qwik Loader script is added to the document or not. Defaults to <code>{ include: true }</code>. |\n|  [serverData?](#) |  | Record&lt;string, any&gt; | _(Optional)_ |\n|  [snapshot?](#) |  | boolean | _(Optional)_ Defaults to <code>true</code> |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.renderoptions.md"
    },
    {
      "name": "RenderResult",
      "id": "renderresult",
      "hierarchy": [
        {
          "name": "RenderResult",
          "id": "renderresult"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderResult \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [isStatic](#) |  | boolean |  |\n|  [manifest?](#) |  | QwikManifest | _(Optional)_ |\n|  [prefetchResources](#) |  | [PrefetchResource](#prefetchresource)<!-- -->\\[\\] |  |\n|  [snapshotResult](#) |  | SnapshotResult \\| undefined |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.renderresult.md"
    },
    {
      "name": "renderToStream",
      "id": "rendertostream",
      "hierarchy": [
        {
          "name": "renderToStream",
          "id": "rendertostream"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport type RenderToStream = (opts: RenderToStreamOptions) => Promise<RenderToStreamResult>;\n```\n**References:** [RenderToStreamOptions](#rendertostreamoptions)<!-- -->, [RenderToStreamResult](#rendertostreamresult)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/render.ts",
      "mdFile": "qwik.rendertostream.md"
    },
    {
      "name": "RenderToStream",
      "id": "rendertostream",
      "hierarchy": [
        {
          "name": "RenderToStream",
          "id": "rendertostream"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type RenderToStream = (opts: RenderToStreamOptions) => Promise<RenderToStreamResult>;\n```\n**References:** [RenderToStreamOptions](#rendertostreamoptions)<!-- -->, [RenderToStreamResult](#rendertostreamresult)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostream.md"
    },
    {
      "name": "RenderToStreamOptions",
      "id": "rendertostreamoptions",
      "hierarchy": [
        {
          "name": "RenderToStreamOptions",
          "id": "rendertostreamoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderToStreamOptions extends RenderOptions \n```\n**Extends:** [RenderOptions](#renderoptions)\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [stream](#) |  | StreamWriter |  |\n|  [streaming?](#) |  | [StreamingOptions](#streamingoptions) | _(Optional)_ |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostreamoptions.md"
    },
    {
      "name": "RenderToStreamResult",
      "id": "rendertostreamresult",
      "hierarchy": [
        {
          "name": "RenderToStreamResult",
          "id": "rendertostreamresult"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderToStreamResult extends RenderResult \n```\n**Extends:** [RenderResult](#renderresult)\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [flushes](#) |  | number |  |\n|  [size](#) |  | number |  |\n|  [timing](#) |  | { firstFlush: number; render: number; snapshot: number; } |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostreamresult.md"
    },
    {
      "name": "renderToString",
      "id": "rendertostring",
      "hierarchy": [
        {
          "name": "renderToString",
          "id": "rendertostring"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport type RenderToString = (opts: RenderToStringOptions) => Promise<RenderToStringResult>;\n```\n**References:** [RenderToStringOptions](#rendertostringoptions)<!-- -->, [RenderToStringResult](#rendertostringresult)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/render.ts",
      "mdFile": "qwik.rendertostring.md"
    },
    {
      "name": "RenderToString",
      "id": "rendertostring",
      "hierarchy": [
        {
          "name": "RenderToString",
          "id": "rendertostring"
        }
      ],
      "kind": "TypeAlias",
      "content": "```typescript\nexport type RenderToString = (opts: RenderToStringOptions) => Promise<RenderToStringResult>;\n```\n**References:** [RenderToStringOptions](#rendertostringoptions)<!-- -->, [RenderToStringResult](#rendertostringresult)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostring.md"
    },
    {
      "name": "RenderToStringOptions",
      "id": "rendertostringoptions",
      "hierarchy": [
        {
          "name": "RenderToStringOptions",
          "id": "rendertostringoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderToStringOptions extends RenderOptions \n```\n**Extends:** [RenderOptions](#renderoptions)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostringoptions.md"
    },
    {
      "name": "RenderToStringResult",
      "id": "rendertostringresult",
      "hierarchy": [
        {
          "name": "RenderToStringResult",
          "id": "rendertostringresult"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface RenderToStringResult extends RenderResult \n```\n**Extends:** [RenderResult](#renderresult)\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [html](#) |  | string |  |\n|  [timing](#) |  | { render: number; snapshot: number; } |  |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.rendertostringresult.md"
    },
    {
      "name": "resolveManifest",
      "id": "resolvemanifest",
      "hierarchy": [
        {
          "name": "resolveManifest",
          "id": "resolvemanifest"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport declare function resolveManifest(manifest: QwikManifest | ResolvedManifest | undefined): ResolvedManifest | undefined;\n```\n\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  manifest | QwikManifest \\| ResolvedManifest \\| undefined |  |\n\n**Returns:**\n\nResolvedManifest \\| undefined",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/render.ts",
      "mdFile": "qwik.resolvemanifest.md"
    },
    {
      "name": "SerializeDocumentOptions",
      "id": "serializedocumentoptions",
      "hierarchy": [
        {
          "name": "SerializeDocumentOptions",
          "id": "serializedocumentoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface SerializeDocumentOptions \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [debug?](#) |  | boolean | _(Optional)_ |\n|  [manifest?](#) |  | QwikManifest \\| ResolvedManifest | _(Optional)_ |\n|  [symbolMapper?](#) |  | SymbolMapperFn | _(Optional)_ |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.serializedocumentoptions.md"
    },
    {
      "name": "setServerPlatform",
      "id": "setserverplatform",
      "hierarchy": [
        {
          "name": "setServerPlatform",
          "id": "setserverplatform"
        }
      ],
      "kind": "Function",
      "content": "```typescript\nexport declare function setServerPlatform(manifest: QwikManifest | ResolvedManifest | undefined): Promise<void>;\n```\n\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  manifest | QwikManifest \\| ResolvedManifest \\| undefined |  |\n\n**Returns:**\n\nPromise&lt;void&gt;",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/index.ts",
      "mdFile": "qwik.setserverplatform.md"
    },
    {
      "name": "StreamingOptions",
      "id": "streamingoptions",
      "hierarchy": [
        {
          "name": "StreamingOptions",
          "id": "streamingoptions"
        }
      ],
      "kind": "Interface",
      "content": "```typescript\nexport interface StreamingOptions \n```\n\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [inOrder?](#) |  | [InOrderStreaming](#inorderstreaming) | _(Optional)_ |",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.streamingoptions.md"
    },
    {
      "name": "SymbolsToPrefetch",
      "id": "symbolstoprefetch",
      "hierarchy": [
        {
          "name": "SymbolsToPrefetch",
          "id": "symbolstoprefetch"
        }
      ],
      "kind": "TypeAlias",
      "content": "auto: Prefetch all possible QRLs used by the document. Default\n\n\n```typescript\nexport type SymbolsToPrefetch = 'auto' | ((opts: {\n    manifest: QwikManifest;\n}) => PrefetchResource[]);\n```\n**References:** [PrefetchResource](#prefetchresource)",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/types.ts",
      "mdFile": "qwik.symbolstoprefetch.md"
    },
    {
      "name": "versions",
      "id": "versions",
      "hierarchy": [
        {
          "name": "versions",
          "id": "versions"
        }
      ],
      "kind": "Variable",
      "content": "```typescript\nversions: {\n    readonly qwik: string;\n    readonly qwikDom: string;\n}\n```",
      "editUrl": "https://github.com/BuilderIO/qwik/tree/main/packages/qwik/src/server/utils.ts",
      "mdFile": "qwik.versions.md"
    }
  ]
}